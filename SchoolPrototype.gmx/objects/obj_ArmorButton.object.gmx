<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// Start button in NotPressed state.
State = "NotPressed";
// Weapon selected on current step.
CurrentWeapon = noone;
// Weapon selected on previous step.
LastWeapon = noone;
// Whether the selected weapon is 'usable'
UsableWeaponSelected = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Press
State = "NotPressed";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get draw location

// Goofy, make sure to figure out if we even need to do this?
//  Constant GUI size or no?
x = display_get_gui_width() - 48;
y = 64;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update weapon reference

// Save references to the current weapon and previous current weapon.
LastWeapon = CurrentWeapon;
CurrentWeapon = global.MyWeapon;

// On weapon change, update usable weapon flag.
if (CurrentWeapon != LastWeapon)
{
    UsableWeaponSelected = scr_isUsable(CurrentWeapon);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for Touch
if (State == "NotPressed")
{
    // Get mouse click in GUI reference frame.
    var _mouse_x = device_mouse_x_to_gui( 0 );
    var _mouse_y = device_mouse_y_to_gui( 0 );
    
    // If user clicked the button.
    if( mouse_check_button_pressed( mb_left ) )
    {
        if( _mouse_x &gt; x-16 &amp;&amp; _mouse_x &lt; x+16 )
            if( _mouse_y &gt; y-16 &amp;&amp; _mouse_y &lt; y+16 )
                if (UsableWeaponSelected)
                {
                    // Create the armor to start the effect.
                    var inst = instance_create(-150, -150, CurrentWeapon);
                    // Button remains pressed for the time specified by the armor.
                    State = "Pressed";
                    alarm[0] = inst.Lifetime;
                }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI

// Debug, verify health change.
// REMOVE LATER
//draw_text(150, 150, string(global.MyInst.HitPoints));

if (State == "NotPressed")
{
    if (UsableWeaponSelected)
    {
        // Draw background.
        draw_sprite_ext(spr_ball, 0, x, y, 1, 1, 0, c_green, 1);
        // Choose which object sprite we need to draw based on weapon selection.
        var temp_sprite = noone;
        switch(CurrentWeapon)
        {
            case obj_Ninja:
            case obj_Ninja_2:
            case obj_Ninja_3:
                temp_sprite = spr_Ninja;
                break;
            case obj_Platemail:
            case obj_Platemail_2:
            case obj_Platemail_3:
                temp_sprite = spr_Platemail;
                break;
        }
        
        // Draw the weapon sprite.
        if (temp_sprite != noone)
            draw_sprite(temp_sprite, 0, x, y);
    }
    else
    {
        draw_sprite(spr_ball, 0, x, y);
    }
}
else
{
    // Draw red button.
    draw_sprite_ext(spr_ball, 0, x, y, 1, 1, 0, c_red, 1);
    // Set text alignment.
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    // Draw countdown timer.
    draw_text( x, y, string( ceil(alarm[0] / 30.0) ) );
    // Reset text alignment.
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do not draw
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
