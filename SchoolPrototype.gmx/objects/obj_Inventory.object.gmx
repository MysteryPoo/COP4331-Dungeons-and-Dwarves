<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weapon_list = ds_list_create();
ds_list_add(weapon_list, spr_arrow, spr_bomb, spr_spike);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer = 10;
size = 16;
offset = 32;
list_size = ds_list_size(weapon_list);
for(i = 0; i &lt; list_size; i++)
{
    transparency = .2;
    spriteX = i*size;
    x = view_xview[0] + spriteX + i*buffer + offset;
    y = view_yview[0];
    curr_spr = ds_list_find_value(weapon_list, i);
    if(curr_spr == spr_arrow)
    {
        if(global.HasArrow)
        {
            transparency = 1;
            var arrowLeft, arrowRight, arrowTop, arrowBottom;
            arrowLeft = x;
            arrowRight = x + size;
            arrowTop = y;
            arrowBottom = y + size; 
        }
    } 
    else if(curr_spr == spr_bomb)
    {
        if(global.HasBomb)
        {
            transparency = 1;
            var bombLeft, bombRight, bombTop, bombBottom;
            bombLeft = x;
            bombRight = x + size;
            bombTop = y;
            bombBottom = y + size; 
        }
    }
    else if(curr_spr == spr_spike)
    {
        if(global.HasSpike)
        {
            transparency = 1;
            var spikeLeft, spikeRight, spikeTop, spikeBottom;
            spikeLeft = x;
            spikeRight = x + size;
            spikeTop = y;
            spikeBottom = y + size; 
        }
    } 
    draw_sprite_pos(curr_spr, 0, x, y, x + size, y, x + size, y + size, x , y + size, transparency);
  
}

if(global.HasArrow &amp;&amp; arrowLeft &lt; mouse_x and arrowRight &gt; mouse_x and arrowTop &lt; mouse_y and arrowBottom &gt; mouse_y)
{
    if(mouse_check_button(mb_left))
    {
        global.MyWeapon = obj_Arrow;
    }
}
if(global.HasBomb &amp;&amp; bombLeft &lt; mouse_x and bombRight &gt; mouse_x and bombTop &lt; mouse_y and bombBottom &gt; mouse_y)
{
    if(mouse_check_button(mb_left))
    {
        global.MyWeapon = obj_Bomb;
    }
}
if(global.HasSpike &amp;&amp; spikeLeft &lt; mouse_x and spikeRight &gt; mouse_x and spikeTop &lt; mouse_y and spikeBottom &gt; mouse_y)
{
    if(mouse_check_button(mb_left))
    {
        global.MyWeapon = obj_Spike;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
