<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shop Inventory
Selected = -1
ShopInventory = ds_list_create();
PlayerInventory = noone;

//bow
ShopItemMap = ds_map_create();
ShopItemMap[? "item"] = obj_Bow;
ShopItemMap[? "name"] = "Bow";
ShopItemMap[? "sprite"] = spr_Bow;
ShopItemMap[? "price"] = 10;
ShopItemMap[? "max"] = 1;
ds_list_add(ShopInventory, ShopItemMap);

ShopItemMap = ds_map_create();
ShopItemMap[? "name"] = "Arrows";
ShopItemMap[? "sprite"] = spr_arrow;
ShopItemMap[? "price"] = 1;
ShopItemMap[? "max"] = 100;
ds_list_add(ShopInventory, ShopItemMap);

ShopItemMap = ds_map_create();
ShopItemMap[? "name"] = "Arrows";
ShopItemMap[? "sprite"] = spr_arrow;
ShopItemMap[? "price"] = 1;
ShopItemMap[? "max"] = 100;
ds_list_add(ShopInventory, ShopItemMap);

ShopItemMap = ds_map_create();
ShopItemMap[? "name"] = "Arrows";
ShopItemMap[? "sprite"] = spr_arrow;
ShopItemMap[? "price"] = 1;
ShopItemMap[? "max"] = 100;
ds_list_add(ShopInventory, ShopItemMap);

ShopItemMap = ds_map_create();
ShopItemMap[? "name"] = "Arrows";
ShopItemMap[? "sprite"] = spr_arrow;
ShopItemMap[? "price"] = 1;
ShopItemMap[? "max"] = 100;
ds_list_add(ShopInventory, ShopItemMap);

ShopItemMap = ds_map_create();
ShopItemMap[? "name"] = "Arrows";
ShopItemMap[? "sprite"] = spr_arrow;
ShopItemMap[? "price"] = 1;
ShopItemMap[? "max"] = 100;
ds_list_add(ShopInventory, ShopItemMap);

ShopItemMap = ds_map_create();
ShopItemMap[? "name"] = "Arrows";
ShopItemMap[? "sprite"] = spr_arrow;
ShopItemMap[? "price"] = 1;
ShopItemMap[? "max"] = 100;
ds_list_add(ShopInventory, ShopItemMap);

PlayerInventory = obj_Inventory;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shop State
/*
CLOSED
OPEN
*/

State = "CLOSED";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shop Page
Page = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG - give treasure
global.Treasure = 1000;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Window Dimensions

WindowX = 0;
WindowY = 0;
WindowWidth = 0;
WindowHeight = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clicked
Clicked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
var _lengthCache = ds_list_size(ShopInventory);
for (i = 0; i &lt; _lengthCache; ++i)
{
    ds_map_destroy(ShopInventory[| i]);
}

ds_list_destroy(ShopInventory);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for clicked buttons

if (State == "OPENED" &amp;&amp; device_mouse_check_button(0, mb_left))
{
    var _mx = device_mouse_x_to_gui(0);
    var _my = device_mouse_y_to_gui(0);
    
    var _boxX = WindowX + 15;
    var _boxY = WindowY + 70; 
    //Check if any of the item slots were clicked on.
    for (i = 0; i &lt; 6; ++i)
    {
        var _current = i + (Page * 6);
        if (point_in_rectangle(_mx, _my, _boxX + (70 * i), _boxY, _boxX + (70 * i) + 40, _boxY + 40))
        {
            //Player clicked on a slot, check if they can purchase it.
            if (_current &lt; ds_list_size(ShopInventory)) //Does the slot have an item?
            {
                var _shopItem = ShopInventory[| _current];
                if (global.Treasure &gt;= _shopItem[? "price"]) //Can the player afford this item?
                {
                    var _owned = 0;
                    if ((_shopItem[? "max"] == 1) &amp;&amp; ds_list_find_index(PlayerInventory.Inventory, _shopItem[? "item"]) != -1)
                    {
                        _owned = 1;
                    }
                    else if (_shopItem[? "max"] != 1)
                    {
                        _owned = PlayerInventory.Ammo[? _shopItem[? "name"]];
                    }
                }
                if (_owned &lt; _shopItem[? "max"])
                    Selected = _current; //Everything is good.
            }
        }
    }
    
    //Check if the back button was clicked.
    if (point_in_rectangle(_mx, _my, WindowX + 2, 155, WindowX + 35, 155 + 14))
    {
        //Check if we can go back a page.
        if (Page &gt; 0)
            Page--;
    }
    
    //Check if the forward button was clicked.
    if (point_in_rectangle(_mx, _my, WindowX + WindowWidth - 35, 155, WindowX + WindowWidth - 2, 155 + 14))
    {
        //Check if we can go forward a page.
        if (Page + 1 &lt; ceil(ds_list_size(ShopInventory)/6.0))
            Page++;
    }
    
    //Check if the buy button was clicked.
    if (!Clicked &amp;&amp; point_in_rectangle(_mx, _my, WindowX + 1, 220, WindowX + 66, 234))
    {
        //Check if we can buy the item
        var _shopItem = ShopInventory[| Selected];
        if (global.Treasure &gt;= _shopItem[? "price"])
        {
            var _owned = 0;
            if ((_shopItem[? "max"] == 1) &amp;&amp; ds_list_find_index(PlayerInventory.Inventory, _shopItem[? "item"]) != -1)
            {
                _owned = 1;
            }
            else if (_shopItem[? "max"] != 1)
            {
                _owned = PlayerInventory.Ammo[? _shopItem[? "name"]];
            }
            if (_owned &lt; _shopItem[? "max"])
            {
                //Everything is good, do the transaction.
                global.Treasure -= _shopItem[? "price"];
                if (_shopItem[? "max"] != 1)
                    PlayerInventory.Ammo[? _shopItem[? "name"]]++;
                else
                    ds_list_add(PlayerInventory.Inventory, _shopItem[? "item"]);
                
                //Check to see if we have reached the cap and need to de-select.
                if (_owned + 1 &gt;= _shopItem[? "max"])
                    Selected = -1;
            }
        }
    }
    
    //Check if the exit button was clicked.
    if (!Clicked &amp;&amp; point_in_rectangle(_mx, _my, WindowX + WindowWidth - 64, 220, WindowX + WindowWidth, 234))
    {
        State = "CLOSED";
    }
    
    Clicked = true;
}
else if (!device_mouse_check_button(0, mb_left))
{
    Clicked = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open State -- Draw Shop Window
if (State == "OPENED")
{
    if (PlayerInventory == noone)
        PlayerInventory = obj_Inventory;
    var _screenWidth = display_get_gui_width();
    var _screenHeight = display_get_gui_height();
    
    WindowWidth = 420;
    WindowHeight = 200;
    
    WindowX = round(_screenWidth/2 - (WindowWidth/2));
    WindowY = round(_screenHeight/2 - (WindowHeight/2));
    
    //Draw background. Can be replaced with a texture. Assuming 480x270 is the gui resoluition, then it should be 420x200
    draw_rectangle_color(WindowX, WindowY, WindowX + WindowWidth, WindowY + WindowHeight, make_color_rgb(150, 75, 15), make_color_rgb(150, 75, 15), make_color_rgb(75, 38, 7), make_color_rgb(75, 38, 7), false);
    
    //Draw shop title text
    draw_set_font(fnt_Shop);
    draw_set_halign(fa_center);
    
    //use ghetto outlining technique to draw outline of shop title text
    draw_set_color(c_white);
    draw_text(WindowX + (WindowWidth/2.0) - 1, WindowY + (WindowHeight/14.0) - 1, "Item Store");
    draw_text(WindowX + (WindowWidth/2.0) + 1, WindowY + (WindowHeight/14.0) - 1, "Item Store");
    draw_text(WindowX + (WindowWidth/2.0) + 1, WindowY + (WindowHeight/14.0) + 1, "Item Store");
    draw_text(WindowX + (WindowWidth/2.0) - 1, WindowY + (WindowHeight/14.0) + 1, "Item Store");
    
    //draw inside of shop title text
    draw_set_color(c_black);
    draw_text(WindowX + (WindowWidth/2.0), WindowY + (WindowHeight/14.0), "Item Store");
    draw_set_font(fnt_Default_Small);
    draw_set_halign(fa_left);
    
    draw_set_color(c_white);
    draw_text(WindowX + 1, WindowY + 1, "Treasure: " + string(global.Treasure));
    draw_set_color(c_black);
    
    //Draw the item slots. The shop can have a maximum of 6 per page.
    var _perRow = 0;
    var _boxcount = 0;
    
    var _boxX = WindowX + 15;
    var _boxY = WindowY + 70;
    for (i = Page * 6; _boxcount &lt; 6; ++i)
    {
        //Draw an outline around the selected item slot.
        if (Selected == i)
            draw_roundrect_color(_boxX + (70 * _perRow) - 3, _boxY - 3, _boxX + (70 * _perRow) + 43, _boxY + 43, c_yellow, c_yellow, false); 
    
        draw_roundrect_color(_boxX + (70 * _perRow), _boxY, _boxX + (70 * _perRow) + 40, _boxY + 40, c_white, c_white, false);
           
        if (i &lt; ds_list_size(ShopInventory))
        {
            var _shopItem = ShopInventory[| i];
            var _owned = 0;
            if ((_shopItem[? "max"] == 1) &amp;&amp; ds_list_find_index(PlayerInventory.Inventory, _shopItem[? "item"]) != -1)
            {
                _owned = 1;
            }
            else if (_shopItem[? "max"] != 1)
            {
                _owned = PlayerInventory.Ammo[? _shopItem[? "name"]];
            }
            
            //Draw the quantity of this item versus the max.
            draw_text(_boxX + (70 * _perRow) + 1, _boxY, string(_owned) + "/" + string(_shopItem[? "max"]));
            
            if (_owned &gt;= _shopItem[? "max"])
                draw_sprite_ext(_shopItem[? "sprite"], -1, _boxX + (70 * _perRow) + 4 + sprite_get_width(_shopItem[? "sprite"])/2, _boxY + 4 + sprite_get_height(_shopItem[? "sprite"])/2, 1, 1, 0, c_red, 1);
            else
                draw_sprite_ext(_shopItem[? "sprite"], -1, _boxX + (70 * _perRow) + 4 + sprite_get_width(_shopItem[? "sprite"])/2, _boxY + 4 + sprite_get_height(_shopItem[? "sprite"])/2, 1, 1, 0, c_white, 1);
            
            //Draw the price of the item:
            draw_sprite_ext(spr_Treasure1, -1, _boxX + (70 * _perRow) + 6, _boxY + 35, 0.25, 0.25, 0, c_white, 1);
            draw_text(_boxX + (70 * _perRow) + 8, _boxY + 30, string(_shopItem[? "price"]));
        }
        
        _perRow++;
        _boxcount++;
    }
    
    //Draw current page number
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text(WindowX + (WindowWidth/2.0), _boxY + 45, "Page: " + string(Page + 1) + "/" + string(ceil(ds_list_size(ShopInventory)/6.0)));
    draw_set_color(c_black);
    
    //Draw Previous Page nutton
    if (Page + 1 &gt; 1)
        draw_sprite_ext(spr_Shop_Arrow, -1, WindowX + 35, 165, 1, 1, 180, c_white, 1);
    else
        draw_sprite_ext(spr_Shop_Arrow, -1, WindowX + 35, 165, 1, 1, 180, c_black, 1);
    //Draw Next Page nutton
    if (Page + 1 &lt; ceil(ds_list_size(ShopInventory)/6.0))
        draw_sprite_ext(spr_Shop_Arrow, -1, WindowX + WindowWidth - 35, 165, 1, 1, 0, c_white, 1);
    else
        draw_sprite_ext(spr_Shop_Arrow, -1, WindowX + WindowWidth - 35, 165, 1, 1, 0, c_black, 1);
        
    //Draw Buy button
    var _shopItem = -1;
    if (Selected != -1)
        _shopItem = ShopInventory[| Selected];
    if (_shopItem != -1 &amp;&amp; global.Treasure &gt;= _shopItem[? "price"])
        draw_sprite_ext(spr_Shop_Buy, -1, WindowX + 1, 220, 1, 1, 0, c_white, 1);
    else
        draw_sprite_ext(spr_Shop_Buy, -1, WindowX + 1, 220, 1, 1, 0, c_black, 1);
        
    //Draw Exit button
    draw_sprite(spr_Shop_Exit, -1, WindowX + WindowWidth - 64, 220);
    
    draw_set_font(fnt_Default);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlayerInventory.Ammo[? "Arrows"] = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (State != "OPENED")
    State = "OPENED";
else
    State = "CLOSED";
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
