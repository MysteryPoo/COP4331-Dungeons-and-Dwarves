<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dwarf_idle_s</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State
State = "Idle_Start";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Network ID
netID = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hasKey
hasKey = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hasTorch
hasTorch = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MaxSpeed
MaxSpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MySword
mySword = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions
var foundCollision;

//find a collision through frame movement
foundCollision = collision_rectangle(bbox_left + min(0, -hspeed), bbox_top + min(0, -vspeed), bbox_right + max(0, -hspeed), bbox_bottom + max(0, -vspeed), obj_Wall, false, true);

if( foundCollision ){//collision detected

    //return to previous position
    x = xprevious;
    y = yprevious;
    
    //advance position to meet obstruction
    if( vspeed &gt; 0 ){//Player is descending
        move_contact_solid(270, vspeed);
        if( !place_free(x, y + 1) ){
            vspeed = 0;
        }  
    }else if( vspeed &lt; 0 ){//player is ascending
        move_contact_solid(90, -vspeed);
        if( !place_free(x, y - 1) ){
            vspeed = 0;
        }  
    }
    if( hspeed &gt; 0 ){//player is moving right
        move_contact_solid(0, hspeed);
        if( !place_free(x + 1, y) ){
            hspeed = 0;
        }  
    }else if( hspeed &lt; 0 ){//player is moving left
        move_contact_solid(180, -hspeed);
        if( !place_free(x - 1, y) ){
            hspeed = 0;
        }  
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process Input
if( State != "Ice" &amp;&amp; instance_exists( obj_Gesture0 ) &amp;&amp; global.MyInst = id )
{
    if( obj_Gesture0.Touched )
    {
        direction = obj_Gesture0.direction;
        MaxSpeed = 5 * obj_Gesture0.scale;
    }
    else
        MaxSpeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gesture 1
if( State != "Death" )
{
    if( instance_exists( obj_Gesture1 ) &amp;&amp; global.MyInst = id )
    {
        if( !instance_exists( mySword ) &amp;&amp; obj_Gesture1.Released &amp;&amp; obj_Gesture1.max_dist &lt; 32 )
        {
            mySword = instance_create( x, y - 16, obj_Sword );
            mySword.direction = obj_Gesture0.direction;
            mySword.image_angle = obj_Gesture0.direction;
            mySword.Owner = id;
            if( instance_exists( obj_Client ) )
            {
                buffer_seek( obj_Client.Buffer, buffer_seek_start, 0 );
                buffer_write( obj_Client.Buffer, buffer_u8, 5 );
                buffer_write( obj_Client.Buffer, buffer_s16, mySword.x );
                buffer_write( obj_Client.Buffer, buffer_s16, mySword.y );
                buffer_write( obj_Client.Buffer, buffer_s16, obj_Gesture0.direction );
                network_send_packet( obj_Client.Socket, obj_Client.Buffer, buffer_tell( obj_Client.Buffer ) );
            }
        }
        else if( obj_Gesture1.Released &amp;&amp; obj_Gesture1.max_dist &gt; 32 )
        {
            var inst = instance_create( x, y - 16, obj_Spike );
            inst.direction = obj_Gesture1.direction;
            //inst.image_angle = inst.direction;
            //inst.speed = 10;
            inst.Owner = id;
            if( instance_exists( obj_Client ) )
            {
                buffer_seek( obj_Client.Buffer, buffer_seek_start, 0 );
                buffer_write( obj_Client.Buffer, buffer_u8, 6 );
                buffer_write( obj_Client.Buffer, buffer_s16, x );
                buffer_write( obj_Client.Buffer, buffer_s16, y );
                buffer_write( obj_Client.Buffer, buffer_s16, obj_Gesture1.direction );
                buffer_write( obj_Client.Buffer, buffer_s8, 10 );
                network_send_packet( obj_Client.Socket, obj_Client.Buffer, buffer_tell( obj_Client.Buffer ) );
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Idle
if( State == "Idle_Start" )
{
    State = "Idle";
    if( direction &lt; 180 )
        sprite_index = spr_dwarf_idle_n;
    else
        sprite_index = spr_dwarf_idle_s;
}
if( State == "Idle" )
{
    if( MaxSpeed &gt; 0 )
        State = "Move_Start";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move
if( State == "Move_Start" )
{
    State = "Move";
}
if( State == "Move" )
{
    // Direction animation
    if( direction &lt; 45 || direction &gt; 315 )
    {
        sprite_index = spr_dwarf_walk_e;
        image_xscale = 1;
    }
    else if( direction &lt; 135 )
        sprite_index = spr_dwarf_walk_n;
    else if( direction &lt; 225 )
    {
        sprite_index = spr_dwarf_walk_e;
        image_xscale = -1;
    }
    else
        sprite_index = spr_dwarf_walk_s;
    // End of animation direction
    // Are we on ice?
    if( place_meeting( x, y, obj_Ice ) )
        State = "Ice_Start";
    // End ice check
    // Ramp up speed ( no instantaneous velocities )
    if( MaxSpeed &gt; 0 )
        speed = min( ++speed, MaxSpeed );
    else
        speed = max( --speed, 0 );
    // End of acceleration
    // Are we Idle?
    if( speed == 0 )
        State = "Idle_Start";
    // End idle check
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ice
if( State == "Ice_Start" )
{
    State = "Ice";
    MaxSpeed = 0;
    // Maybe we'll add a sliding animation
    // The player could be like, "Whoa.... whoa! AAH!! Whoa!"
}
if( State == "Ice" )
{
    if( !place_meeting( x, y, obj_Ice ) )
        State = "Move_Start";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death
if( State == "Death_Start" )
{
    sprite_index = spr_player_death;
    image_index = 0;
    speed = 0;
    State = "Death";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fall
if( State == "Fall" )
{
    image_xscale -= 0.1;
    image_yscale -= 0.1;
    speed = 0;
    if( image_xscale &lt; 0 )
    {
        State = "Idle_Start";
        x = global.StartX;
        y = global.StartY;
        image_xscale = 1;
        image_yscale = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Key">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pick up key
hasKey = true;
with( other )
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Torch">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pick up torch
hasTorch = true;
with( other )
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop animation
if( sprite_index == spr_player_death )
{
    room_goto( room );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
