<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dwarf_idle_s</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State
State = "Idle_Start";
StateTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Network ID
netID = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hasKey
hasKey = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hasTorch
hasTorch = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MaxSpeed
MaxSpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MySword
mySword = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Steps
Steps = 1000 * 10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hit Points
HitPoints = 100;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scale
image_xscale = 0.25;
image_yscale = 0.25;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Speed Scalar
SpeedScale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Speed Reset
SpeedScale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions
var foundCollision;

//find a collision through frame movement
foundCollision = collision_rectangle(bbox_left + min(0, hspeed), bbox_top + min(0, vspeed), bbox_right + max(0, hspeed), bbox_bottom + max(0, vspeed), obj_Wall, false, true);

if( foundCollision ){//collision detected

    //return to previous position
    x = xprevious;
    y = yprevious;
    
    //advance position to meet obstruction
    if( vspeed &gt; 0 ){//Player is descending
        move_contact_solid(270, vspeed);
        if( !place_free(x, y + 1) ){
            vspeed = 0;
        }  
    }else if( vspeed &lt; 0 ){//player is ascending
        move_contact_solid(90, -vspeed);
        if( !place_free(x, y - 1) ){
            vspeed = 0;
        }  
    }
    if( hspeed &gt; 0 ){//player is moving right
        move_contact_solid(0, hspeed);
        if( !place_free(x + 1, y) ){
            hspeed = 0;
        }  
    }else if( hspeed &lt; 0 ){//player is moving left
        move_contact_solid(180, -hspeed);
        if( !place_free(x - 1, y) ){
            hspeed = 0;
        }  
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State Timer
if( StateTimer &gt; 0 )
    --StateTimer;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process Movement
if( State != "Ice" &amp;&amp; instance_exists( obj_Gesture0 ) &amp;&amp; global.MyInst == id )
{
    if( obj_Gesture0.Touched )
    {
        direction = obj_Gesture0.direction;
        MaxSpeed = 2.5 * SpeedScale * obj_Gesture0.scale;
    }
    else
        MaxSpeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process Attacks
if( State != "Death" )
{
    if( instance_exists( obj_Gesture1 ) &amp;&amp; global.MyInst == id )
    {
        if( !instance_exists( mySword ) &amp;&amp; obj_Gesture1.Released &amp;&amp; obj_Gesture1.max_dist &lt; 16 )
        {
            mySword = instance_create( x + 16 * dcos( direction ), y - 16 * dsin( direction ), obj_Sword );
            mySword.direction = obj_Gesture0.direction;
            mySword.image_angle = obj_Gesture0.direction;
            mySword.Owner = id;
            if( instance_exists( obj_Client ) )
            {
                buffer_seek( obj_Client.Buffer, buffer_seek_start, 0 );
                buffer_write( obj_Client.Buffer, buffer_u8, 5 );
                buffer_write( obj_Client.Buffer, buffer_string, object_get_name( mySword.object_index ) );
                buffer_write( obj_Client.Buffer, buffer_s16, mySword.x );
                buffer_write( obj_Client.Buffer, buffer_s16, mySword.y );
                buffer_write( obj_Client.Buffer, buffer_s16, obj_Gesture0.direction );
                buffer_write( obj_Client.Buffer, buffer_u8, 0 );
                network_send_packet( obj_Client.Socket, obj_Client.Buffer, buffer_tell( obj_Client.Buffer ) );
            }
        }
        else if( obj_Gesture1.Released &amp;&amp; obj_Gesture1.max_dist &gt; 16 )
        {
            if( object_exists( global.MyWeapon ) )
            {
                validShot = false;
                if( instance_exists( obj_Inventory ) )
                {
                    switch( global.MyWeapon )
                    {
                        case obj_Bow:
                        case obj_Bow_2:
                        case obj_Bow_3:
                            if( obj_Inventory.Ammo[? "Arrows" ] &gt; 0 )
                            {
                                --obj_Inventory.Ammo[? "Arrows" ];
                                validShot = true;
                            }
                            break;
                        case obj_Spike:
                        case obj_Spike_2:
                        case obj_Spike_3:
                            validShot = true;
                            break;
                        case obj_Bomb:
                            if( obj_Inventory.Ammo[? "Bombs" ] &gt; 0 )
                            {
                                --obj_Inventory.Ammo[? "Bombs" ];
                                validShot = true;
                            }
                    }
                }
                if( validShot )
                {
                    var _xx = x + 32 * dcos( obj_Gesture1.direction );
                    var _yy = y - 32 * dsin( obj_Gesture1.direction );
                    var inst = instance_create( _xx, _yy, global.MyWeapon );
                    inst.direction = obj_Gesture1.direction;
                    inst.image_angle = inst.direction;
                    inst.Owner = id;
                    if( instance_exists( obj_Client ) )
                    {
                        buffer_seek( obj_Client.Buffer, buffer_seek_start, 0 );
                        buffer_write( obj_Client.Buffer, buffer_u8, 5 );
                        buffer_write( obj_Client.Buffer, buffer_string, object_get_name( inst.object_index ) );
                        buffer_write( obj_Client.Buffer, buffer_u16, _xx );
                        buffer_write( obj_Client.Buffer, buffer_u16, _yy );
                        buffer_write( obj_Client.Buffer, buffer_s16, obj_Gesture1.direction );
                        network_send_packet( obj_Client.Socket, obj_Client.Buffer, buffer_tell( obj_Client.Buffer ) );
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Idle
if( State == "Idle_Start" )
{
    State = "Idle";
    image_speed = 0.01;
    x = floor( x );
    y = floor( y );
    sprite_index = spr_dwarf_idle_s;
    if( direction &lt; 180 )
        image_angle = 180;
        //sprite_index = spr_dwarf_idle_n;
    else
        image_angle = 0;
        //sprite_index = spr_dwarf_idle_s;*/
}
if( State == "Idle" )
{
    if( MaxSpeed &gt; 0 )
        State = "Move_Start";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move
if( State == "Move_Start" )
{
    State = "Move";
    sprite_index = spr_dwarf_walk_s;
    image_speed = 0.25;
}
if( State == "Move" )
{
    // Direction animation
    image_angle = scr_Angle24Dir( direction );
    // End of animation direction
    // Are we on ice?
    if( place_meeting( x, y, obj_Ice ) )
        State = "Ice_Start";
    // End ice check
    // Ramp up speed ( no instantaneous velocities )
    if( MaxSpeed &gt; 0 )
        speed = min( ++speed, MaxSpeed );
    else
        speed = max( --speed, 0 );
    // End of acceleration
    // Are we Idle?
    if( speed == 0 )
        State = "Idle_Start";
    // End idle check
    // Foot Steps
    if( Steps &gt; 0 )
    {
        --Steps;
        if( Steps mod 10 == 0 )
        {
            var step = instance_create( x, y, obj_FootPrint );
            step.image_angle = direction;
        }
    }
    // End Foot Steps
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ice
if( State == "Ice_Start" )
{
    State = "Ice";
    MaxSpeed = 0;
    image_speed = 0.5;
    // Maybe we'll add a sliding animation
    // The player could be like, "Whoa.... whoa! AAH!! Whoa!"
}
if( State == "Ice" )
{
    if( !place_meeting( x, y, obj_Ice ) )
        State = "Move_Start";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hit
if( State == "Hit_Start" )
{
    State = "Hit";
    StateTimer = 15;
    // Change animation
}
if( State == "Hit" )
{
    if( StateTimer mod 5 == 0 )
        visible = !visible;
    if( StateTimer mod 2.5 == 0 &amp;&amp; StateTimer != 15 )
        speed *= 0.1;
    if( speed &lt; 1 )
        speed = 0;
    if( StateTimer == 0 )
    {
        State = "Idle_Start";
        visible = true;
    }
    if( HitPoints &lt;= 0 )
    {
        State = "Death_Start";
        visible = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death
if( State == "Death_Start" )
{
    sprite_index = spr_player_death;
    image_index = 0;
    speed = 0;
    State = "Death";
    StateTimer = 30 * 2;
}
if( State == "Death" )
{
    if( image_index &gt;= image_number - 1 )
        image_speed = 0;
    if( StateTimer == 0 )
    {
        if( room = rm_Client || room == rm_Server )
            instance_destroy();
        else
        {
            if( global.RestartOnDeath &amp;&amp; !global.Waiting )
            {
                room_goto( room );
            }
            else
            {
                State = "Idle_Start";
                x = global.StartX;
                y = global.StartY;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fall
if( State == "Fall_Start" )
{
    speed = 0;
    State = "Fall";
    StateTimer = 30 * 2;
}
if( State == "Fall" )
{
    if( image_xscale &gt; 0 )
    {
        image_xscale -= 0.1;
        image_yscale -= 0.1;
    }
    else if( StateTimer == 0 )
    {
        State = "Idle_Start";
        x = global.StartX;
        y = global.StartY;
        image_xscale = 0.25;
        image_yscale = 0.25;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Key">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pick up key
hasKey = true;
with( other )
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Self
draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Hit Points
draw_rectangle_colour( x - 16, y, x - 16 + 32 * HitPoints / 100, y + 8, c_maroon, c_red, c_black, c_red, false );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
