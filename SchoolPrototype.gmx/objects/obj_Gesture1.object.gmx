<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Touch properties
mxs = 0;
mys = 0;
mx = 0;
my = 0;
dist = 0;
max_dist = 0;
scale = 0;
Touched = false;
Released = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Multi Touch Device 1
Touched = false;
Released = false;
if( device_mouse_check_button_pressed( 1, mb_left ) )
{
    /// Enable gesture tracking
    mxs = device_mouse_x( 1 ) - view_xview[ 0 ];
    mys = device_mouse_y( 1 ) - view_yview[ 0 ];
    dist = 0;
    max_dist = 0;
    scale = 0;
}

if( device_mouse_check_button( 1, mb_left ) )
{
    Touched = true;
    /// Update Touch
    mx = device_mouse_x( 1 ) - view_xview[ 0 ];
    my = device_mouse_y( 1 ) - view_yview[ 0 ];
    dist = point_distance( mxs, mys, mx, my );
    if( dist &gt; 64 )
        dist = 64;
    if( dist &gt; max_dist )
        max_dist = dist;
    if( max_dist &gt; 0 )
        scale = dist / max_dist;
    direction = point_direction( mxs, mys, mx, my );
    visible = true;
}

if( device_mouse_check_button_released( 1, mb_left ) )
{
    /// Disable gesture tracking
    //scale = 0;
    visible = false;
    Released = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keyboard Override
if( os_type == os_android )
    exit;
Touched = false;
Released = false;
if( keyboard_check_released( vk_numpad3 ) )
{
    Released = true;
    scale = 1;
    direction = 315;
    visible = true;
    max_dist = 100;
}
else if( keyboard_check_released( vk_numpad9 ) )
{
    Released = true;
    scale = 1;
    direction = 45;
    visible = true;
    max_dist = 100;
}
else if( keyboard_check_released( vk_numpad7 ) )
{
    Released = true;
    scale = 1;
    direction = 135;
    visible = true;
    max_dist = 100;
}
else if( keyboard_check_released( vk_numpad1 ) )
{
    Released = true;
    scale = 1;
    direction = 225;
    visible = true;
    max_dist = 100;
}
else if( keyboard_check_released( vk_numpad6 ) )
{
    Released = true;
    scale = 1;
    direction = 0;
    visible = true;
    max_dist = 100;
}
else if( keyboard_check_released( vk_numpad8 ) )
{
    Released = true;
    scale = 1;
    direction = 90;
    visible = true;
    max_dist = 100;
}
else if( keyboard_check_released( vk_numpad4 ) )
{
    Released = true;
    scale = 1;
    direction = 180;
    visible = true;
    max_dist = 100;
}
else if( keyboard_check_released( vk_numpad2 ) )
{
    Released = true;
    scale = 1;
    direction = 270;
    visible = true;
    max_dist = 100;
}
else if( keyboard_check_released( vk_numpad5 ) )
{
    Released = true;
    scale = 1;
    direction = global.MyInst.direction;
    visible = true;
    max_dist = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug draw
if( instance_exists( global.MyInst ) )
{
    var _sx = global.MyInst.x
    var _sy = global.MyInst.y
    var _xx = _sx + ( mx - mxs );
    var _yy = _sy + ( my - mys );
    draw_circle( _sx, _sy, 8, false );
    draw_circle( _sx, _sy, max_dist, true );
    draw_arrow( _sx, _sy, _xx, _yy, 10 );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
