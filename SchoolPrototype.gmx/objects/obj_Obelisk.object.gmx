<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// How long to keep the obelisk alive for in steps.
Lifetime = 600;
// Maximum range of Hazards relative to obelisk center.
HazardRange = 100;
// Object to use as Hazards.
HazardObject = obj_Gas;
// Starting direction for the obelisk Hazard rotation.
Direction = 0;
// Current multiplier for Hazard range to keep Hazards between 0 and HazardRange.
// Will stay between 0.0 and 1.0
HazardMultiplier = 0.0;
// Amount to increment/decrement HazardMultiplier each step.
HazardMultiplierIncrement = 0.01;

// Set life alarm for obelisk.
alarm[0] = 600;

// Create all Hazards.
Hazard1 = instance_create(x + HazardRange, y, HazardObject);
Hazard2 = instance_create(x, y - HazardRange, HazardObject);
Hazard3 = instance_create(x - HazardRange, y, HazardObject);
Hazard4 = instance_create(x, y + HazardRange, HazardObject);

// Set each Hazard's lifetime to the same as the obelisk.
// NOTE: This depends on the Hazard object using alarm[0] as a life alarm
//  and should possibly be changed to avoid that assumption.
with (Hazard1) { alarm[0] = other.Lifetime; Delay = 3; }
with (Hazard2) { alarm[0] = other.Lifetime; Delay = 3; }
with (Hazard3) { alarm[0] = other.Lifetime; Delay = 3; }
with (Hazard4) { alarm[0] = other.Lifetime; Delay = 3; }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move Hazards

// Update direction of Hazard rotation and constrain between 0-359
Direction += 2;
Direction %= 360;
// Increment/Decrement the Hazard range multiplier.
HazardMultiplier += HazardMultiplierIncrement;

// Move all Hazards in a circular expanding/contracting pattern.

Hazard1.x = x + HazardRange * HazardMultiplier * dcos(Direction);
Hazard1.y = y - HazardRange * HazardMultiplier * dsin(Direction);

Hazard2.x = x + HazardRange * HazardMultiplier * dcos((Direction + 90) % 360);
Hazard2.y = y - HazardRange * HazardMultiplier * dsin((Direction + 90) % 360);

Hazard3.x = x + HazardRange * HazardMultiplier * dcos((Direction + 180) % 360);
Hazard3.y = y - HazardRange * HazardMultiplier * dsin((Direction + 180) % 360);

Hazard4.x = x + HazardRange * HazardMultiplier * dcos((Direction + 270) % 360);
Hazard4.y = y - HazardRange * HazardMultiplier * dsin((Direction + 270) % 360);

// If the HazardMultiplier hits a bound, reverse the expansion/contraction
//  pattern.
if (HazardMultiplier == 0 || HazardMultiplier == 1.0)
    HazardMultiplierIncrement *= -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
