<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// New instance variables.

// Flag indicating player detection.
PlayerDetected = false;
// Max radius for detecting player.
DetectionRadius = 200;
// Length of time the enemy pursues the player for after losing detection.
DetectionDuration = 60;
// State used for behavior choices.
State = "Wander";
// Maximum speed for wander movements.
MaxWanderSpeed = 1;
// Maximum length of time between changing wander movement.
MaxWanderDuration = 60;
// Used as a timer, initialize to max.
CurrentWanderDuration = MaxWanderDuration;
// Flag for if we can contact damage the player.
CanContactPlayer = false;
// Timer to prevent sitting on top of player doing damage
ContactDamageTimer = 90;
// Contact damage.
Damage = 10;
// HitPoints
HitPoints = 50;
// To prevent being hit by a weapon multiple times.
LastDamagingID = noone;

alarm[1] = ContactDamageTimer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Contact Player
CanContactPlayer = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lost Player
PlayerDetected = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions
var foundCollision;

//find a collision through frame movement
foundCollision = collision_rectangle(bbox_left + min(0, -hspeed), bbox_top + min(0, -vspeed), bbox_right + max(0, -hspeed), bbox_bottom + max(0, -vspeed), obj_Wall, false, true);

if( foundCollision ){//collision detected

    //return to previous position
    x = xprevious;
    y = yprevious;
    
    //advance position to meet obstruction
    if( vspeed &gt; 0 ){//Object is descending
        move_contact_solid(270, vspeed);
        if( !place_free(x, y + 1) ){
            vspeed = 0;
        }  
    }else if( vspeed &lt; 0 ){//Object is ascending
        move_contact_solid(90, -vspeed);
        if( !place_free(x, y - 1) ){
            vspeed = 0;
        }  
    }
    if( hspeed &gt; 0 ){//Object is moving right
        move_contact_solid(0, hspeed);
        if( !place_free(x + 1, y) ){
            hspeed = 0;
        }  
    }else if( hspeed &lt; 0 ){//Object is moving left
        move_contact_solid(180, -hspeed);
        if( !place_free(x - 1, y) ){
            hspeed = 0;
        }  
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Try Detection

// Check that the player is close enough to detect.
if (distance_to_object(obj_Dwarf) &lt; DetectionRadius * global.MyInst.image_alpha)
{
    // Check that the player is in line of sight.
    if (collision_line(x, y, global.MyInst.x, global.MyInst.y, obj_Wall, false, true) == noone)
    {
        // Player Detected.  Set flag and start timer.
        PlayerDetected = true;
        alarm[0] = DetectionDuration;
    }
}
// If we don't detect the player, continue wandering.
if (!PlayerDetected)
{
    State = "Wander";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wander
if (State == "Wander")
{
    if (CurrentWanderDuration == MaxWanderDuration)
    {
        var vertical_weight = 0;
        var horizontal_weight = 0;
        
        // Determine if we should move up (negative weight) or down (positive weight)
        if (!place_free(x, y - 30))
            vertical_weight = 2;
        else if (!place_free(x, y + 30))
            vertical_weight = -2;
            
        // Determine if we should move left (negative weight) or right (positive weight)
        if (!place_free(x - 20, y))
            horizontal_weight = 2;
        else if (!place_free(bbox_right + 20, y))
            horizontal_weight = -2;

        // If we need to move right
        if (horizontal_weight &gt; 0)
            direction = 0;
        // If we need to move left
        else if (horizontal_weight &lt; 0)
            direction = 180;
        // No preference, decide randomly
        else
        {
            if (irandom(1))
                direction = 0;
            else
                direction = 180;
        }
        
        // Pick a random offset to our current direction between 0 and 90 degrees
        var offset = irandom(90);
        
        // If we need to move down
        if (vertical_weight &gt; 0)
        {
            // Move down and to the right (range 270-360)
            if (direction == 0)
                direction = 360 - offset;
            // Move down and to the left (range 180-270)
            else
                direction += offset;
        }
        // If we need to move up
        else if (vertical_weight &lt; 0)
        {
            // Move up and to the right (range 0-90)
            if (direction == 0)
                direction += offset;
            // Move up and to the left (range 90-180)
            else
                direction -= offset;
        }
        // No preference for up or down, decide randomly
        else
        {
            if (irandom(1))
                direction += offset;
            else
                direction -= offset;
        }       
        
        speed = irandom(MaxWanderSpeed);
    }
    
    // Update State timer and reset if needed.
    CurrentWanderDuration -= 1;
    if (CurrentWanderDuration == 0)
        CurrentWanderDuration = MaxWanderDuration;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Dwarf">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage Player

// Placeholder

// Make sure the player isn't already dead.
if (other.State != "Death" &amp;&amp; other.State != "Hit" &amp;&amp; CanContactPlayer)
{
    other.State = "Hit_Start";
    other.HitPoints -= Damage;
    CanContactPlayer = false;
    alarm[1] = ContactDamageTimer;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Weapon">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Take Damage

// Placeholder
if (other.id != LastDamagingID &amp;&amp; other.Owner == global.MyInst.id)
{
    HitPoints -= other.Damage;
    LastDamagingID = other.id;
    
    // Death routine goes here.
    if (HitPoints &lt;= 0)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Detection Indicator

if (PlayerDetected)
{
    draw_sprite(spr_Exclamation, 0, x, y - 48);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Hit Points
draw_rectangle_colour( x - 16, y, x - 16 + 32 * HitPoints / 100, y + 8, c_maroon, c_red, c_black, c_red, false );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
