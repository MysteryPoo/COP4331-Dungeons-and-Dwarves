<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Enemy_Base</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// New Instance Variables

// Path index to use for this object.
// NOTE: OVERRIDE WITH DESIRED PATH, Avoidance_small is a placeholder!
Path = path_Avoidance_small;
// Speed to travel along the path.
PathSpeed = 1;
// Speed to chase the player.
ChaseSpeed = 2;
// Speed to return to the path.
ReturnToPathSpeed = 2;
// Point on the path (0.0 - 1.0) we were last on.
LastPathPosition = 0;
// X-coord for last path position.
LastPathX = path_get_x(Path, 0);
// Y-coord for last path position.
LastPathY = path_get_y(Path, 0);
// Direction (forward = 1, reverse = -1) we were last on the path.
LastPathDirection = 1;
// Path Specifications.  PLEASE override these
//  in child classes if you desire different behavior.
PathEndAction = 3;
PathAbsolute = true;
// Attack flag.
CanAttack = false;
// Cooldown between possible attacks.
AttackCooldown = 60;
// Weapon to create/use.
MeleeWeapon = obj_Sword;
// Range at which to create weapon.
AttackRange = 30;

// Overrides
State = "Patrol";

// Start attack cooldown timer when created.
alarm[5] = AttackCooldown;

// Start pathing
path_start(Path, PathSpeed, PathEndAction, PathAbsolute);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CanAttack
CanAttack = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack

if (CanAttack)
{
    // If we're within melee range, attack.
    if (distance_to_point(global.MyInst.x, global.MyInst.y) &lt; AttackRange)
    {
        // Create the Sword to attack.
        // y offset of instance creation is subtracted since
        //  positive y direction is downwards
        var weapon = instance_create(x + AttackRange * dcos(direction) / 3, 
                                    y - AttackRange * dsin(direction) / 3, 
                                    MeleeWeapon);
        // Configure the weapon sprite angle.
        weapon.image_angle = direction;
        
        // Reset attack flag and timer.
        CanAttack = false;
        alarm[5] = AttackCooldown;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State Update

if (PlayerDetected)
{
    // If the path has ended and we've detected the player.
    if (State == "Patrol" &amp;&amp; path_index != -1)
    {
        // Save all path information needed to return.
        LastPathPosition = path_position;
        LastPathX = path_get_x(Path, path_position);
        LastPathY = path_get_y(Path, path_position);
        if (path_position &gt; path_positionprevious)
            LastPathDirection = 1;
        else
            LastPathDirection = -1;
        path_end();
    }
    // Enter Chase State.
    State = "Chase";
}
else
{
    // Maintain Patrol State.
    State = "Patrol";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Return to Path
if (path_index == -1 &amp;&amp; State == "Patrol")
{
    // Step toward the position we left off from.
    mp_potential_step(LastPathX, LastPathY, ReturnToPathSpeed, false);
    
    // If we've returned to the spot we left, restore pathing information.
    if (x == LastPathX &amp;&amp; y == LastPathY)
    {       
        // Start the pathing.
        path_start(Path, PathSpeed * LastPathDirection, PathEndAction, PathAbsolute);
        // Restore path position.
        // Note this happens instantly, so the player shouldn't see the 
        //  'teleport' that happens.
        path_position = LastPathPosition;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Chase Player

if (State == "Chase")
{
    if (distance_to_point(global.MyInst.x, global.MyInst.y) &gt; 30)
    {
        // Step towards the player.
        mp_potential_step(global.MyInst.x, global.MyInst.y, ChaseSpeed, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fix stupid Gamemaker bug
// Turns out there is a pathing bug in Gamemaker that
//  doesn't appear to be actively investigated.  On some paths at
//  the end of the path before executing the end action, the path_position
//  gets set to 2.  This value should ALWAYS be between 0 and 1.
if (path_position == 2)
    path_position = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,32</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
